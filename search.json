[{"title":"My First Post","url":"/2025/04/28/My-First-Post/","content":"nihao\n"},{"title":"多个远程git仓库与本地仓库的连接管理","url":"/2025/04/28/%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/","content":"我有两个远程仓库，一个名为kanpeiming.github.io、另一个名为blog.github.ioblog.github.io，，第一个代表个人网站，第二个用来管理本地的代码，两个文件都关联与本地同步吗，还是只用管理第二个？\n如果你有两个远程仓库，kanpeiming.github.io 用来托管个人网站，而 blog.github.io 用来管理本地的代码，你的选择取决于这两个仓库的具体用途以及你想如何管理它们。\n1. 网站仓库和代码仓库的分离在很多情况下，个人网站和博客代码会存储在不同的仓库中，以便进行更好的组织和管理。具体来说：\n\nkanpeiming.github.io：这是你的个人网站仓库，用来托管网站的静态文件，通常它会直接与 GitHub Pages 集成。\nblog.github.io：这是用来管理你的博客内容的仓库，可能存储你的 Markdown 文件、主题、插件等源代码，供你构建和部署博客。\n\n2. 是否同步到本地你可以选择将这两个仓库都克隆到本地，也可以只管理其中一个，具体取决于你的需求：\n\n如果两个仓库需要分别管理：你可以将这两个仓库分别克隆到本地的不同目录，这样你就可以单独管理它们。例如：\n\n克隆 kanpeiming.github.io 到本地的 kanpeiming.github.io 文件夹，用来管理网站内容。\n克隆 blog.github.io 到本地的 blog.github.io 文件夹，用来管理博客的代码和内容。\n\n这样，它们在本地是分开的，你可以分别进行修改和推送。\ngit clone https://github.com/your-username/kanpeiming.github.io.gitgit clone https://github.com/your-username/blog.github.io.git\n\n如果你只想管理博客仓库 blog.github.io：如果你只关心博客仓库的代码，并且想通过它来部署网站内容，你可以只在本地管理 blog.github.io。在这种情况下，你可能会使用构建工具（比如 Jekyll、Hugo 或其他静态网站生成器）来生成网站文件，并将生成的静态文件推送到 kanpeiming.github.io 作为网站内容。\n例如，你可以：\n\n将博客的源代码放在本地的 blog.github.io 仓库中。\n使用构建工具生成静态网站文件。\n将生成的静态文件推送到 kanpeiming.github.io 仓库，用来发布到 GitHub Pages。\n\n\n\n3. 如何管理这两个仓库\n管理 kanpeiming.github.io：这个仓库主要存储用于网站发布的静态文件。如果你使用 GitHub Pages，你只需要将生成的 HTML、CSS 和 JavaScript 文件推送到 kanpeiming.github.io，而不需要管理源代码。你可以在博客仓库中管理源代码，然后构建和部署到该仓库。\n管理 blog.github.io：这是你博客的源代码仓库，通常包括 Markdown 文件、模板和配置文件等。你可以用它来管理博客的内容和主题。每次更新博客内容后，你将代码推送到 blog.github.io。\n\n4. 推送到不同的远程仓库假设你在本地管理 blog.github.io 代码仓库，并且想要将构建出来的静态文件推送到 kanpeiming.github.io 仓库。你可以使用 Git 的远程仓库别名来实现这一点。\n\n添加第二个远程仓库（kanpeiming.github.io） 到本地的 blog.github.io 仓库中：\ngit remote add personal-site https://github.com/your-username/kanpeiming.github.io.git\n\n推送代码到 blog.github.io： 当你在本地更新并提交博客代码时，推送到 blog.github.io：\ngit push origin master\n\n将构建后的文件推送到 kanpeiming.github.io： 如果你使用构建工具生成了静态网站文件，并希望将这些文件推送到 kanpeiming.github.io，你可以在本地执行推送：\ngit push personal-site master\n\n总结\n如果你需要分别管理个人网站和博客的内容，你应该将这两个仓库分别克隆到本地，并分别管理。\n如果你只需要管理博客仓库，你可以通过生成静态文件并推送到个人网站仓库的方式来管理网站内容。\n\n这样，你就可以通过合理的仓库结构和 Git 操作来管理多个远程仓库。\n","categories":["-Git学习笔记"]},{"title":"部署数据库","url":"/2025/04/30/%E9%83%A8%E7%BD%B2%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"注：1panel数据库的面板的地址是http://118.25.110.238:23456/databases/mysql，服务器的地址是http://118.25.110.238:9853/?server=10.8.135.76&amp;username=root，登录adminer后，即代表在服务器端进行数据库的创建，在数据库完成创建后，在1panel数据库的面板中点击从服务器同步，就可以直接在1panel面板查看自己创建的数据库的信息。\n在1panel直接创建数据库时，并不是在服务器上创建，用户名是不能为root的。\n逻辑参考：\n1panel可以理解为可视化我们的服务器。\n\n1.登录adminer\n\n2.在adminer创建数据库skldata\n校对规则选择：utf8mb4_0900_ai_ci，与之前使用HeidiSQL建表的校对规则保持一致。如下：\n\n3.导入数据表选中自己创建的数据库\n\nskldata数据库下导入数据表，使用导入sql文件方式，导入顺序如下：\n\n注意，导入sql文件后，由于数据量大，执行时间会比较长，不要刷新页面。\n\n顺利执行后，数据库的部署就完成了。\n4.遇到的问题由于两个论文表的sql文件大小超过了adminer的容量限制（128MB），所以单独需要处理这两个表。\n解决办法是：\n将这两个sql文件通过1panel上传到路径（本机目录）&#x2F;opt&#x2F;1panel&#x2F;apps&#x2F;mysql&#x2F;mysql&#x2F;data下，然后在mysql容器的命令行中执行这两个文件。（这里的本机代表的是服务器。）\n读起来可能比较难理解，我们用图来说明：\n\n\n（1）本机目录代表服务器上的文件路径\n（2）容器目录是容器内部的一个路径。通过 Docker 挂载机制，容器目录和宿主机目录（即本机目录）关联起来。\n（3）这样，容器中的应用可以直接访问宿主机上的文件，并且容器对该路径的修改会影响宿主机上的相应文件。换句话说，容器内部的路径（容器目录）只是指向宿主机目录的一个映射，它并不复制数据，而是直接使用宿主机的数据。\n为什么要使用挂载？\n持久化数据：容器的生命周期通常是短暂的，容器可以随时被创建、销毁或重新启动。如果数据存储在容器内部，那么容器一旦被删除或重启，数据也会丢失。使用挂载（如使用本机目录或 Docker 卷）可以确保容器的数据被存储在宿主机上。即使容器被删除或重新创建，数据仍然存在。\n反过来理解，如果没有进行挂载，那么在容器内对文件进行修改，不会影响服务器的文件。\n如上图所示，红框内，我设置了这样的一条关联，接下来进行进行数据库的导入和挂载效果的演示：\n首先没有在容器命令行操作：共16个表\n\n接下来在命令行（容器的终端）执行如下操作：\nbash-5.1# lsafs   dev             home   media  proc  sbin  tmpbin   docker-entrypoint-initdb.d  lib    mnt    root  srv   usrboot  etc             lib64  opt    run   sys   varbash-5.1# cd varbash-5.1# lsadm    db     ftp    kerberos  local  log   nis  preserve  spool  ypcache  empty  games  lib       lock   mail  opt  run       tmpbash-5.1# cd libbash-5.1# lsalternatives  games  mysql    mysql-keyring  rpm-state  supportinfodnf       misc   mysql-files  rpm        selinuxbash-5.1# cd mysqlbash-5.1# ls&#x27;#ib_16384_0.dblwr&#x27;   client-cert.pem         private_key.pem&#x27;#ib_16384_1.dblwr&#x27;   client-key.pem          public_key.pem&#x27;#innodb_redo&#x27;        cssci_info.sql          server-cert.pem&#x27;#innodb_temp&#x27;        ib_buffer_pool          server-key.pem auto.cnf         ibdata1             skldata binlog.000001        ibtmp1              ssci_and_hci_info.sql binlog.000002        mysql           sys binlog.000003        mysql.ibd           undo_001 binlog.index         mysql.sock          undo_002 ca-key.pem       mysql_upgrade_history ca.pem           performance_schema // 前边的几个显示目录的操作主要是为了展示容器的文件系统。bash-5.1# mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 1163Server version: 8.4.4 MySQL Community Server - GPLCopyright (c) 2000, 2025, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.// 切换为skldata数据库，之后执行sql文件，表就导入了skldata中mysql&gt; use skldata;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; show tables;+------------------------------------+| Tables_in_skldata                  |+------------------------------------+| discipline_info                    || journal_info                       || nat_social_science_group_categorie || nat_social_science_group_type      || national_social_science_aware_info || organization_info                  || paper_person_info                  || person_info                        || province_topic_category            || province_topic_info                || publish_unit_info                  || social_science_aware_info          || social_science_aware_level         || social_science_group_info          || social_science_group_type          || ssci_and_hc_thesis_type_info       |+------------------------------------+16 rows in set (0.00 sec)// 导入数据表mysql&gt; source /var/lib/mysql/cssci_info.sql;mysql&gt; source /var/lib/mysql/ssci_and_hci_info.sql;\n\n导入数据表之后，我们发现服务器也随之增加了两个表。\n\n数据库的导入到这里就算完成了。\n","categories":["-服务器部署"]},{"title":"归类博客","url":"/2025/04/28/%E5%BD%92%E7%B1%BB%E5%8D%9A%E5%AE%A2/","content":"发布博客post，如果我想把同一类博客归到一个文件夹下，应该怎么做？？\n在 Hexo 项目中，如果你想将同一类博客文章归到一个文件夹下，可以通过设置分类（categories）或者标签（tags）来实现。这将使你的博客文章在发布后按照分类或标签进行组织。\n这里有几种方法可以实现你的目标：\n1. 使用分类（Categories）Hexo 支持为博客文章设置分类，你可以将博客文章放入同一分类文件夹。以下是如何设置分类的步骤：\n\n修改文章的 front-matter打开你要归类的博客文章文件，在文章的 front-matter 中添加分类字段。例如，将博客归类到 tech 分类下：\ntitle: 博客文章标题date: 2025-04-28 12:00:00categories:  - tech\n\n创建分类页面如果你还没有创建分类页面，可以在 Hexo 项目根目录下执行以下命令来生成分类页面：\nhexo generate\n\n然后，访问 /categories/tech/，你就可以看到所有归类到 tech 分类下的文章。\n\n查看生成的文件夹当 Hexo 生成文件时，会在 public 文件夹下创建一个 categories 文件夹，其中包含按分类组织的文章。例如：\npublic/categories/tech/\n\n2. 使用标签（Tags）如果你想通过标签来组织文章，也可以使用标签。与分类类似，在文章的 front-matter 中添加标签字段：\ntitle: 博客文章标题date: 2025-04-28 12:00:00tags:  - javascript  - web\n\n然后，Hexo 会为每个标签生成相应的页面，类似于分类页面，你可以通过访问 /tags/javascript/ 来查看所有带有 javascript 标签的文章。\n3. 自定义目录结构如果你想要自定义文件夹结构，将文章手动归到指定的文件夹下，可以通过创建子目录来实现。例如，你可以在 _posts 目录下创建一个新的文件夹（如 tech），并将相关的文章放在该文件夹中。这样，文件的路径会变成：\nsource/_posts/tech/你的博客文章.md\n\n这样生成的 URL 将会保持目录结构的一致性，并将文章归类到相应的文件夹中。\n结论\n如果你希望通过分类来组织文章，使用 categories 字段。\n如果你希望通过标签来组织文章，使用 tags 字段。\n如果你希望手动调整文件夹结构，可以将文章移动到自定义的子文件夹中。\n\n使用分类和使用标签的效果分别是什么，是我在启动hexo server 之后，博客页面会多出一个目录吗？？\n是的，使用分类（categories）和标签（tags）都会在 Hexo 启动服务器后，生成相应的页面和目录。它们的效果和生成的目录结构有所不同，下面是它们的具体效果：\n1. 分类（Categories）当你使用分类时，Hexo 会为每个分类生成一个单独的页面，并且会自动创建相应的目录结构。分类页面通常用来显示归属于某一类别的所有文章。\n效果：\n分类页面：例如，如果你设置了 categories: tech，Hexo 会为 tech 分类生成一个页面，并将所有属于这个分类的文章列在该页面下。这个页面的 URL 路径通常是 http://你的博客地址/categories/tech/。\n\n分类目录：当你运行 hexo generate 或 hexo server 后，Hexo 会在 public/categories/ 下创建相应的文件夹。举个例子，如果你有 tech 分类，那么它的路径会是 public/categories/tech/，并且在该文件夹下会列出所有被归类为 tech 的文章。\n\n\n示例：\n文章的 front-matter 配置：\ntitle: 我的技术博客date: 2025-04-28 12:00:00categories:  - tech\n\n生成的 URL：\n\n分类页面：http://你的博客地址/categories/tech/\n文章页面：http://你的博客地址/2025/04/28/我的技术博客/\n\n\n\n结果：访问 http://你的博客地址/categories/tech/，会看到所有被归类为 tech 分类的文章。\n2. 标签（Tags）标签的作用类似于分类，但通常是用于对文章的更细粒度的组织。每篇文章可以拥有多个标签，每个标签会生成一个页面，列出所有带有该标签的文章。\n效果：\n标签页面：当你在文章中添加了标签时，Hexo 会为每个标签生成一个单独的页面，显示所有带有该标签的文章。标签页面的 URL 路径通常是 http://你的博客地址/tags/标签名/。\n\n标签目录：Hexo 会在 public/tags/ 下生成每个标签的文件夹。例如，如果你有标签 javascript，则会生成 public/tags/javascript/，并列出所有带有 javascript 标签的文章。\n\n\n示例：\n文章的 front-matter 配置：\ntitle: 我的前端博客date: 2025-04-28 12:00:00tags:  - javascript  - front-end\n\n生成的 URL：\n\n标签页面：http://你的博客地址/tags/javascript/\n文章页面：http://你的博客地址/2025/04/28/我的前端博客/\n\n\n\n结果：访问 http://你的博客地址/tags/javascript/，会看到所有带有 javascript 标签的文章。\n总结\n分类（Categories）：生成一个按类别组织的页面，访问路径是 /categories/分类名/。分类页面会列出所有属于该分类的文章。\n标签（Tags）：生成一个按标签组织的页面，访问路径是 /tags/标签名/。标签页面会列出所有带有该标签的文章。\n\n这两者都会在你运行 hexo server 后在博客页面上显示相应的目录。\n","categories":["-Git学习笔记"]}]